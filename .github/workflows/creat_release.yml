name: Build and Release
on:
  push:
    #tags:
      #- 'v*'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
      - name: Build executable
        run: pyinstaller --onefile --name vpngateclient.exe VpngateClient/VpngateClient.py
      - name: Verify executable
        run: |
          if (Test-Path -Path dist\vpngateclient.exe) {
            Write-Host "Executable built successfully."
          } else {
            Write-Error "Executable build failed."
          }
      - uses: actions/upload-artifact@v4
        with:
          name: vpngateclient-exe
          path: dist\vpngateclient.exe

  release:
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          $tag = git describe --tags (git rev-list --tags --max-count=1)
          echo "LATEST_TAG=$tag" >> $env:GITHUB_ENV
          echo "Latest tag: $tag"
      
      - uses: actions/download-artifact@v4
        with:
          name: vpngateclient-exe
          path: .
      - name: Verify artifact
        run: |
          if (Test-Path -Path .\vpngateclient.exe) {
            Write-Host "Artifact downloaded successfully."
          } else {
            Write-Error "Artifact download failed."
          }
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          files: vpngateclient.exe
          body: Release of vpngateclient
          tag_name: ${{ env.LATEST_TAG }}
      - name: Release Verification
        run: |
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Release created successfully."
          } else {
            Write-Error "Release creation failed."
          }